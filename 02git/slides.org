#+OPTIONS: num:nil toc:nil timestamp:nil
#+REVEAL_PLUGINS: (notes)
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_THEME: serif
#+Title: Version Control with git
#+Author: Graham Lee
#+Email: graham.lee@cs.ox.ac.uk

* Version control

What are we trying to achieve?

** For one person

 - An unlimited undo stack
 - With annotated history
 - And timestamps

** How do I do that?

 - edit
 - commit
 - edit
 - commit
 - edit
 - whoops! revert

** For two or more people

 - A shared undo stack
 - Common history
 - Apply my changes to team's work

** How do we do that?

Player 1:

 - edit
 - commit
 - update

Player 2:

 - checkout
 - edit
 - commit
 - update

* Git

** Git version control

Git is a particular version control system. There are others.

Popularised around 2008-2011, after the introduction of GitHub.

GitHub is not git, it is a social network based on git interactions.

** Workflow

Git knows about three places where changes exist.

 - /Local files/ - what you have on your disk.
 - /Staging area/ - things you've told git about but not committed.
 - /Repository/ - a graph of committed changes and their relationships.

#+BEGIN_NOTES

The staging area acts as a place to assemble your thoughts, and gives
you a chance to undo before you commit. The "commit" word is like
"commitment": it's much harder to pretend you didn't do something if
you're committed.

#+END_NOTES

*** 

[[./images/staging.png]]

* Getting started

** Walkthrough
Hopefully, you've installed git.

#+BEGIN_NOTES
If you're on Windows, you'll find a git-bash program in your Start
menu. Use that.
#+END_NOTES

*** Configure git

#+BEGIN_EXAMPLE
$ git config --global user.name "Graham Lee"
$ git config --global user.email "graham.lee@cs.ox.ac.uk"
#+END_EXAMPLE

*** Make a repository

#+BEGIN_EXAMPLE
$ mkdir learning_git
$ cd learning_git
$ git init .
Initialised empty Git repository in /tmp/learning_git/.git/

#+END_EXAMPLE

#+BEGIN_NOTES
You may want to do this somewhere specific, like Documents.
#+END_NOTES

*** Check that it worked

#+BEGIN_EXAMPLE
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
#+END_EXAMPLE

** A first file

*** Create the file

#+BEGIN_EXAMPLE
$ nano index.md

Mountains in the UK   
===================   
England is not very mountainous.   
But has some tall hills, and maybe a mountain or two.
#+END_EXAMPLE

*** It's not in git!

#+BEGIN_EXAMPLE
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	index.md

nothing added to commit but untracked files present (use "git add" to track)
#+END_EXAMPLE

*** Git told us twice to use "git add"

So let's do that. This /stages/ the file.

#+BEGIN_EXAMPLE
$ git add index.md
#+END_EXAMPLE

*** And now commit the staged changes

#+BEGIN_EXAMPLE
$ git commit -m "First commit of discourse on UK topography"
[master (root-commit) 20ad49c] First commit of discourse on UK topography
 1 file changed, 4 insertions(+)
 create mode 100644 index.md
#+END_EXAMPLE

*** Confirm that the change is there...

#+BEGIN_EXAMPLE
$ git log
commit 20ad49cfd1a8a359d30f433dd7263fb25c43c400 (HEAD -> master)
Author: Graham Lee <graham.lee@cs.ox.ac.uk>
Date:   Thu Jun 27 09:28:58 2019 +0100

    First commit of discourse on UK topography
#+END_EXAMPLE

#+BEGIN_NOTES
The long 20ad... number is a commit hash, which uniquely
identifies this change. When git needs you to refer to a commit, you can use this hash. But you don't need to type the whole thing, just enough to be uniquely identifiable.
#+END_NOTES

*** ...and there are no more outstanding changes

#+BEGIN_EXAMPLE
$ git status
On branch master
nothing to commit, working tree clean
#+END_EXAMPLE

*** Make another change

#+BEGIN_EXAMPLE
$ nano index.md

Mountains in the UK
===================
England is not very mountainous.
But has some tall hills, and maybe a mountain or two.

Mount Fictional, in Barsetshire, U.K., is the tallest
mountain in the world.
#+END_EXAMPLE

*** git can see the change...

#+BEGIN_EXAMPLE
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   index.md

no changes added to commit (use "git add" and/or "git commit -a")
#+END_EXAMPLE

#+BEGIN_NOTES
Git wouldn't commit our change yet, because we haven't staged it.
#+END_NOTES

*** ...and can show us the differences

#+BEGIN_EXAMPLE
$ git diff
diff --git a/index.md b/index.md
index 9f69649..699e698 100644
--- a/index.md
+++ b/index.md
@@ -2,3 +2,7 @@ Mountains in the UK
 ===================   
 England is not very mountainous.   
 But has some tall hills, and maybe a mountain or two.
+
+Mount Fictional, in Barsetshire, U.K., is the tallest
+mountain in the world.
+
#+END_EXAMPLE

*** Add all updated files, and commit

#+BEGIN_EXAMPLE
$ git add --update

$ git commit -m "Add a lie about a mountain."
[master d250add] Add a lie about a mountain.
 1 file changed, 4 insertions(+)

$ git log --oneline
d250add (HEAD -> master) Add a lie about a mountain.
20ad49c First commit of discourse on UK topography
#+END_EXAMPLE

*** Another edit

We'll come back to that mistake later, but for now carry on regardless.

#+BEGIN_EXAMPLE
$ nano index.md

$ git diff
diff --git a/index.md b/index.md
index 699e698..6bc639e 100644
--- a/index.md
+++ b/index.md
@@ -1,4 +1,4 @@
-Mountains in the UK   
+Mountains and Hills in the UK   
 ===================   
 England is not very mountainous.   
 But has some tall hills, and maybe a mountain or two.
#+END_EXAMPLE

*** Another edit

#+BEGIN_EXAMPLE
$ git commit -am "Change title"
[master 43db675] Change title
 1 file changed, 1 insertion(+), 1 deletion(-)
#+END_EXAMPLE

The -a option to git commit is the same as doing "git add --update"
followed by "git commit".

* Correcting mistakes

** Review history

#+BEGIN_EXAMPLE
$ git log --oneline
43db675 (HEAD -> master) Change title
d250add Add a lie about a mountain.
20ad49c First commit of discourse on UK topography
#+END_EXAMPLE

That second commit, the one before HEAD, was a mistake. What can we do
about it?

** Reverting the commit

#+BEGIN_EXAMPLE
$ git revert HEAD^
[master 4a08366] Revert "Add a lie about a mountain."
 1 file changed, 4 deletions(-)

$ git log
4a08366 (HEAD -> master) Revert "Add a lie about a mountain."
43db675 Change title
d250add Add a lie about a mountain.
20ad49c First commit of discourse on UK topography
#+END_EXAMPLE

** Rewriting history

The revert added a new commit, "undoing" our mistake. So both the
original commit and the undo appear in the history. Can we remove the
mistake entirely, pretending we never made it?

*** Rewriting history

#+BEGIN_EXAMPLE
$ nano index.md

$ git diff
index 16e9f68..fe8cbca 100644
--- a/index.md
+++ b/index.md
@@ -1,4 +1,4 @@
 Mountains and Hills in the UK   
 ===================   
-England is not very mountainous.   
+Engerland is not very mountainous.   
 But has some tall hills, and maybe a mountain or two.
#+END_EXAMPLE

*** Rewriting history

#+BEGIN_EXAMPLE
$ git commit -am "Change spelling"
[master 92754c8] Change spelling
 1 file changed, 1 insertion(+), 1 deletion(-)

$ git log --oneline
97254c8 (HEAD -> master) Change spelling
4a08366 Revert "Add a lie about a mountain."
43db675 Change title
d250add Add a lie about a mountain.
20ad49c First commit of discourse on UK topography
#+END_EXAMPLE

*** Rewriting history

#+BEGIN_EXAMPLE
$ git reset HEAD^
Unstaged changes after reset:
M	index.md

$ git log --oneline
4a08366 (HEAD -> master) Revert "Add a lie about a mountain."
43db675 Change title
d250add Add a lie about a mountain.
20ad49c First commit of discourse on UK topography
#+END_EXAMPLE

* Publishing on Github

** What is GitHub?

- A cloud store for git repositories
- A social network for programmers

** Getting Started

- Create an account (if you haven't already)
- (Optionally, but recommended) set up an SSH key
- Press "new repository" in github, set a name, description, make it public.

** Add a Remote

Your git repo needs to know about the one on github. Git calls other repositories "remotes".

#+BEGIN_EXAMPLE
$ git remote add origin git@github.com:iamleeg/github-example.git
#+END_EXAMPLE

** Sharing with git

/push/ and /pull/ work with commits, not local files or staged changes.

[[./images/remotes.png]]

** Your first push!

Publish your work so far:

#+BEGIN_EXAMPLE
$ git push -u origin master
Counting objects: 12, done.
Delta compression using up to 12 threads.
Compressing objects: 100% (8/8), done.
Writing objects: 100% (12/12), 1.04 KiB | 356.00 KiB/s, done.
Total 12 (delta 4), reused 0 (delta 0)
remote: Resolving deltas: 100% (4/4), done.
To github.com:iamleeg/github_example.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
#+END_EXAMPLE

** Add another file

#+BEGIN_EXAMPLE
$ nano lakeland.md

Lakeland
========

Cumbria has some pretty hills, and lakes too.
#+END_EXAMPLE

*** Git studiously ignores it...

#+BEGIN_EXAMPLE
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	lakeland.md

nothing added to commit but untracked files present (use "git add" to track)
#+END_EXAMPLE

*** ...even if you try to commit...

#+BEGIN_EXAMPLE
$ git commit -am 'Add Lakeland'
On branch master
Your branch is up-to-date with 'origin/master'.

Untracked files:
	lakeland.md

nothing added to commit but untracked files present
#+END_EXAMPLE

*** ...because you need to explicitly add new files.

#+BEGIN_EXAMPLE
$ git add lakeland.md
$ git commit -am 'Add Lakeland'
[master 7cdcdb1] Add Lakeland
 1 file changed, 5 insertions(+)
 create mode 100644 lakeland.md
#+END_EXAMPLE

*** Push this change to Github

#+BEGIN_NOTES
Important to realise that git doesn't stay in sync.
#+END_NOTES

#+BEGIN_EXAMPLE
$ git push
Counting objects: 3, done.
Delta compression using up to 12 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 338 bytes | 338.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:iamleeg/github_example.git
   33941ba..7cdcdb1  master -> master
#+END_EXAMPLE

** More on multiple files

- Stage/commit different files separately, or together
- Or even different changes in the same file!

* Collaborating with Github

** You need a team

Form pairs. If there are an odd number of you, form pairs and a trio.
Designate one person as the "leader", the other(s) will collaborate.

** Give permission

The leader should go to their Github repo's settings, and add the
collaborator(s) to their project.

** Work on the same code

The collaborator(s) now find the leader's Github repo and clone it:

#+BEGIN_EXAMPLE
$ git clone git@github.com:leader_name/github_example.git
#+END_EXAMPLE

This automatically sets up a remote called "origin".

** Make changes together

*** Leader makes changes

LEADER

#+BEGIN_EXAMPLE
$ nano Wales.md

Mountains In Wales
==================
- Tryfan
- Yr Wyddfa
#+END_EXAMPLE

*** And commits
#+BEGIN_EXAMPLE
$ git add Wales.md
$ git commit -m "Add Wales"

[master d7d7243] Add Wales
 1 file changed, 5 insertions(+)
 create mode 100644 Wales.md
#+END_EXAMPLE

*** And the collaborator

COLLABORATOR
#+BEGIN_EXAMPLE
$ nano Scotland.md

Mountains In Scotland
==================

- Ben Eighe
- Cairngorm

$ git add Scotland.md
$ git commit -m "Add Scotland"
[master aed6a4d] Add Scotland
 1 file changed, 5 insertions(+)
 create mode 100644 Scotland.md
#+END_EXAMPLE

*** One of you pushes...

LEADER
#+BEGIN_EXAMPLE
$ git push
To git@github.com:iamleeg/github_example.git
   79b1285..aed6a4d  master -> master
#+END_EXAMPLE

*** ...the other is rejected :(

COLLABORATOR
#+BEGIN_EXAMPLE
$ git push
To git@github.com:iamleeg/github_example.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'git@github.com:iamleeg/github_example.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
#+END_EXAMPLE

*** What happened?

Git only lets you push when your repo is in sync with the remote (though you can "force push", on exception).

*** Pull to sync with the remote

COLLABORATOR
#+BEGIN_EXAMPLE
$ git pull
Merge made by the 'recursive' strategy.
 Scotland.md | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 Scotland.md

From github.com:iamleeg/github_example
   79b1285..aed6a4d  master     -> origin/master
#+END_EXAMPLE

*** NOW you can push

COLLABORATOR
#+BEGIN_EXAMPLE
$ git push
To git@github.com:iamleeg/github_example.git
   aed6a4d..4bc25e9  master -> master
#+END_EXAMPLE

And the leader has to pull, to get your changes.

* Conflicts and Resolution

** Change a file.

LEADER
#+BEGIN_EXAMPLE
$ nano Wales.md
Mountains In Wales
==================

- Pen y Fan
- Tryfan
- Snowdon
- Fan y Big

$ git commit -am "Add another Beacon"
$ git push
[master 3c4a02f] Add another Beacon
 1 file changed, 2 insertions(+), 1 deletion(-)

To git@github.com:iamleeg/github_example.git
   54a5484..3c4a02f  master -> master
#+END_EXAMPLE

** Collaborator changes the same file

COLLABORATOR
#+BEGIN_EXAMPLE
$ nano Wales.md
Mountains In Wales
==================

- Pen y Fan
- Tryfan
- Snowdon
- Glyder Fawr

$ git commit -m 'Add Glyder'
$ git push
[master a5f66ac] Add Glyder
 1 file changed, 2 insertions(+), 1 deletion(-)

To git@github.com:iamleeg/github_example.git
 ! [rejected]        master -> master (fetch first)
...
#+END_EXAMPLE

** Collaborator pulls to merge upstream changes

COLLABORATOR
#+BEGIN_EXAMPLE
$ git pull
CONFLICT (content): Merge conflict in Wales.md
Automatic merge failed; fix conflicts and then commit the result.

From github.com:iamleeg/github_example
   54a5484..3c4a02f  master     -> origin/master
Recorded preimage for 'Wales.md'
#+END_EXAMPLE

** Git shows the problem

COLLABORATOR
#+BEGIN_EXAMPLE
$ nano index.md
Mountains In Wales
==================

- Pen y Fan
- Tryfan
- Snowdon
<<<<<<< HEAD
- Glyder Fawr
=======
- Fan y Big
>>>>>>> 3c4a02fdbaaa1e2a2af2bf62f9e08ac5ded2b374
#+END_EXAMPLE

#+BEGIN_NOTES
To fix the conflict, make the file make sense again, removing the conflict markers. What "makes sense" depends on your problem, but for source code, making it compile and work is a good baseline.
#+END_NOTES

** Add, commit, and push

COLLABORATOR
#+BEGIN_EXAMPLE
$ git commit -am 'Fix merge conflict in Wales.md'
[master 5f73fff] Fix merge conflict in Wales.md

Recorded resolution for 'Wales.md'.
#+END_EXAMPLE

* Pull Requests

** Forks

That example used one repository, which works when the collaborators are on the same team. To contribute to another project, /fork/ it.

** What is a fork?

Your own copy of the original repo.

** Pull request

Make changes in your own fork. When you're ready, press the pull request button in Github.

The owner of the original repo sees the pull request. They can review the code, suggest changes, accept or reject the pull request.

** Conflicts

Good practice to resolve conflicts in the pull request, to reduce the work the upstream owner must do.
* This presentation

...is on Github!

https://github.com/OxfordRSE/rsd-engineeringcourse
